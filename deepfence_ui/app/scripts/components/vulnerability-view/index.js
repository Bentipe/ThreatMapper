/*eslint-disable*/
/* eslint-disable react/destructuring-assignment */
/* eslint-disable react/no-string-refs */
import React, { useEffect, useState } from 'react';
import { connect, useDispatch } from 'react-redux';
import { Route, Link, Redirect } from 'react-router-dom';
import classnames from 'classnames';
import SideNavigation from '../common/side-navigation/side-navigation';
import HeaderView from '../common/header-view/header-view';
import VulnerabilityStatsView from '../common/top-stats-panel-view/vulnerability-stats-view';
import {
  ADMIN_SIDE_NAV_MENU_COLLECTION,
  USER_SIDE_NAV_MENU_COLLECTION,
} from '../../constants/menu-collection';
import { getUserRole } from '../../helpers/auth-helper';
import VulnerabilityScanView from './scan-index';
import TopExploitableVulnerabilities from './top-exploitable-vulnerabilities';
import {
  getCVESeverityReportAction,
  breadcrumbChange,
} from '../../actions/app-actions';
import pollable from '../common/header-view/pollable';

const menu = [
  {
    id: 'vulnerabilities',
    displayName: 'Most Exploitable Vulnerabilities',
    component: TopExploitableVulnerabilities,
  },
  {
    id: 'scans',
    displayName: 'Vulnerability Scans',
    component: VulnerabilityScanView,
  },
];

const VulnerabilityHome = props => {
  const dispatch = useDispatch();
  const sideNavMenuCollection =
    getUserRole() === 'admin'
      ? ADMIN_SIDE_NAV_MENU_COLLECTION
      : USER_SIDE_NAV_MENU_COLLECTION;
  const [activeMenu, setActiveMenu] = useState(sideNavMenuCollection[0]);
  const [isLicenseExpiryModalVisible, setisLicenseExpiryModalVisible] =
    useState(false);
  const [licenseResponse, setLicenseResponse] = useState(null);

  useEffect(() => {
    const { registerPolling, startPolling } = props;
    registerPolling(pollParams => getReport(pollParams));
    startPolling();
    dispatch(breadcrumbChange([{ name: 'Vulnerability' }]));
  }, []);

  useEffect(() => {
    if (
      props.isLicenseActive &&
      !props.isLicenseExpired &&
      (props.licenseResponse.license_status === 'expired' ||
        props.licenseResponse.license_status === 'hosts_exceeded')
    ) {
      setLicenseResponse(props.licenseResponse);
      setisLicenseExpiryModalVisible(true);
    } else {
      setisLicenseExpiryModalVisible(false);
    }
  }, [props]);

  useEffect(() => {
    return () => {
      const { stopPolling } = props;
      stopPolling();
    };
  }, []);

  const getReport = pollParams => {
    const {
      globalSearchQuery,
      alertPanelHistoryBound = props.alertPanelHistoryBound || {},
      initiatedByPollable,
    } = pollParams;
    const { nodeId, checkType } = props;
    const params = {
      nodeId,
      checkType,
      lucene_query: globalSearchQuery,
      // Conditionally adding number and time_unit fields
      ...(alertPanelHistoryBound.value
        ? { number: alertPanelHistoryBound.value.number }
        : {}),
      ...(alertPanelHistoryBound.value
        ? { time_unit: alertPanelHistoryBound.value.time_unit }
        : {}),
      initiatedByPollable,
    };
    return dispatch(getCVESeverityReportAction(params));
  };

  const { isSideNavCollapsed, isFiltersViewVisible, match } = props;

  const divClassName = classnames({
    'collapse-side-nav': isSideNavCollapsed,
    'expand-side-nav': !isSideNavCollapsed,
    'show-filters-view': isFiltersViewVisible,
    'hide-filters-view': !isFiltersViewVisible,
  });
  const contentClassName = classnames('summary');
  return (
    <div className="cve-summary-view">
      <SideNavigation
        navMenuCollection={sideNavMenuCollection}
        activeMenu={activeMenu}
      />
      <div style={{ overflow: 'hidden' }}>
        <HeaderView />
        <div className={divClassName}>
          <VulnerabilityStatsView />
        </div>
      </div>
      <div className={contentClassName}>
        <div className="tab-links">
          <div className="df-tabs">
            <div className="tabheading">
              <ul>
                {menu.map(menuItem => (
                  <Route
                    key={menuItem.id}
                    path={`${match.path}/${menuItem.id}`}
                    /* eslint-disable react/no-children-prop */
                    children={({ match: linkMatch }) => (
                      <li
                        key={menuItem.id}
                        className={classnames('tab', { active: linkMatch })}
                      >
                        <Link to={`${match.url}/${menuItem.id}`}>
                          {menuItem.displayName}
                        </Link>
                      </li>
                    )}
                    /* eslint-enable */
                  />
                ))}
              </ul>
            </div>
            {menu.map(menuItem => (
              <Route
                key={menuItem.id}
                exact
                path={`${match.path}/${menuItem.id}`}
                render={props => <menuItem.component {...props} />}
              />
            ))}
            <Route
              exact
              path={match.path}
              render={() => <Redirect to={`${match.url}/${menu[0].id}`} />}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

const mapStateToProps = state => ({
  isSideNavCollapsed: state.get('isSideNavCollapsed'),
  isFiltersViewVisible: state.get('isFiltersViewVisible'),
});
export default connect(mapStateToProps)(
  pollable({
    pollingIntervalInSec: 5,
  })(VulnerabilityHome)
);
