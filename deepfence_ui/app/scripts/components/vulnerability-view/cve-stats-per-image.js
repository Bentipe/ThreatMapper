/* eslint-disable react/destructuring-assignment */
import React, { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import {
  getCVEImageReportAction,
  setSearchQuery,
} from '../../actions/app-actions';
import pollable from '../common/header-view/pollable';
import { constructGlobalSearchQuery } from '../../utils/search-utils';

const CVEStatsPerImage = props => {
  const dispatch = useDispatch();

  useEffect(() => {
    const { registerPolling, startPolling } = props;
    registerPolling(pollParams => getCVEImageReport(pollParams));
    startPolling();
  }, []);

  useEffect(
    () => () => {
      const { stopPolling } = props;
      stopPolling();
    },
    []
  );

  const getCVEImageReport = pollParams => {
    const { imageName, scanId } = props;
    const {
      globalSearchQuery,
      alertPanelHistoryBound = props.alertPanelHistoryBound || {},
      initiatedByPollable,
    } = pollParams;
    const params = {
      lucene_query: globalSearchQuery,
      // Conditionally adding number and time_unit fields
      ...(alertPanelHistoryBound.value
        ? { number: alertPanelHistoryBound.value.number }
        : {}),
      ...(alertPanelHistoryBound.value
        ? { time_unit: alertPanelHistoryBound.value.time_unit }
        : {}),
      cve_container_image: imageName,
      scan_id: scanId,
      initiatedByPollable,
    };
    return dispatch(getCVEImageReportAction(params));
  };

  const statsClickHandler = cveSeverity => {
    const { globalSearchQuery: existingQuery = [] } = props;

    const searchQuery = constructGlobalSearchQuery(existingQuery, {
      cve_severity: cveSeverity,
    });

    const globalSearchQuery = {
      searchQuery,
    };
    dispatch(setSearchQuery(globalSearchQuery));
  };

  const {
    data: {
      total = 0,
      severity: { critical = 0, high = 0, medium = 0, low = 0 } = {},
      active_containers: activeContainers = 0,
    } = {},
  } = props;
  return (
    <div>
      <div className="top-vulnerability-stats-wrapper">
        <div className="vulnerability-wrapper">
          <div className="vulnerability-details">
            <div className="vulnerability-details-container">
              <div className="count">{total}</div>
              <div className="name">Total</div>
            </div>
          </div>
          <div className="vulnerability-details critical-alert">
            <div
              className="vulnerability-details-container"
              onClick={() => statsClickHandler('critical')}
              aria-hidden="true"
            >
              <div className="count">{critical}</div>
              <div className="name">critical</div>
            </div>
          </div>
          <div className="vulnerability-details high-alert">
            <div
              className="vulnerability-details-container"
              onClick={() => statsClickHandler('high')}
              aria-hidden="true"
            >
              <div className="count">{high}</div>
              <div className="name">High</div>
            </div>
          </div>
          <div className="vulnerability-details medium-alert">
            <div
              className="vulnerability-details-container"
              onClick={() => statsClickHandler('medium')}
              aria-hidden="true"
            >
              <div className="count">{medium}</div>
              <div className="name">medium</div>
            </div>
          </div>
          <div className="line-break" />
          <div className="vulnerability-details low-alert">
            <div
              className="vulnerability-details-container"
              onClick={() => statsClickHandler('low')}
              aria-hidden="true"
            >
              <div className="count">{low}</div>
              <div className="name">low</div>
            </div>
          </div>
          <div className="vulnerability-details">
            <div className="vulnerability-details-container">
              <div className="count">{activeContainers}</div>
              <div className="name">Active containers</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default pollable()(CVEStatsPerImage);
