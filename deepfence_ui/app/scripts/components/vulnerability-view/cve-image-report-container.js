/* eslint-disable */
import React from 'react';
import { connect } from 'react-redux';
import { nodeFilterValueSelector } from '../../selectors/node-filters';
import {
  reportGenerateAction,
  reportDownloadStatusAction,
  downloadReportAction,
  toaster,
} from '../../actions/app-actions';
import CVEImageReport from './cve-image-report';

class CVEImageReportContainer extends React.PureComponent {
  constructor(props) {
    super(props);
    this.handleDownload = this.handleDownload.bind(this);
  }

  async handleDownload(params) {
    const { dispatch } = this.props;

    const { scanId = '', nodeType = '' } = params;

    const apiParams = {
      action: 'download_report',
      node_type: nodeType,
      add_hist: false,
      action_args: {
        resources: [
          {
            type: 'cve',
            filter: {
              scan_id: [scanId],
            },
          },
        ],
        filters: {
          type: [nodeType],
        },
      },
    };

    const generateReport = dispatch(reportGenerateAction(apiParams));
    dispatch(toaster('Generating Report ...'));
    generateReport.then(res => {
      if (res.success) {
        const fetchReportStatus = dispatch(reportDownloadStatusAction());
        fetchReportStatus.then(async res => {
          if (res.data[0]) {
            let tries = 0
            const totalTries = 3
            while (tries < totalTries){
            // ==========================
            await new Promise(resolve => setTimeout(resolve, 2000));
            const downloadReport = dispatch(
              downloadReportAction({
                path: `/data/xlsx-report/${res.data[0].report_id}/report.xlsx`,
              })
            );
            await downloadReport.then(res => {
              if (!res) {
                dispatch(toaster('Dowloading ...'));
                tries = 3
              } else if(tries + 1 < totalTries){
                dispatch(toaster('File not generated yet, Trying again ..'));
                tries = tries + 1
              } else {
                dispatch(toaster('File generation failed, Try again later'));
                tries = tries + 1
              }
            });
            // ==========================
            }
          } else {
            dispatch(toaster('Report generation status failed'));
          }
        });
      } else {
        dispatch(toaster('Generation failed'));
      }
    });
  }

  render() {
    const { reportView, ...rest } = this.props;
    const data = reportView.get('images');
    const total = reportView.get('total');
    const { isToasterVisible } = this.props;
    return (
      <div>
        <CVEImageReport
          data={data}
          total={total}
          handleDownload={this.handleDownload}
          isToasterVisible={isToasterVisible}
          {...rest}
        />
      </div>
    );
  }
}

function mapStateToProps(state) {
  const reportView = state.getIn(['cve', 'image_report_view']);
  const savedTablePageNumber = state.getIn([
    'cve',
    'image_report_table',
    'state',
    'page_number',
  ]);
  return {
    reportView,
    savedTablePageNumber,
    filterValues: nodeFilterValueSelector(state),
    isToasterVisible: state.get('isToasterVisible'),
  };
}

export default connect(mapStateToProps, {
  reportGenerateAction,
  reportDownloadStatusAction,
  downloadReportAction,
})(CVEImageReportContainer);
