/* eslint-disable */
/* eslint-disable consistent-return */
/* eslint-disable react/no-string-refs */
import React, { useState } from 'react';
import { Redirect } from 'react-router-dom';
import { connect, useDispatch } from 'react-redux';
import pollable from '../common/header-view/pollable';
import {
  ADMIN_SIDE_NAV_MENU_COLLECTION,
  USER_SIDE_NAV_MENU_COLLECTION,
} from '../../constants/menu-collection';
import { getUserRole } from '../../helpers/auth-helper';
import CVESeverityReportContainer from './cve-severity-report-container';
import CVEImageReportContainer from './cve-image-report-container';
import injectModalTrigger from '../common/generic-modal/modal-trigger-hoc';
import {
  getTopVulnerableActiveContainersAction,
  updateTableJSONModalView,
  toaster,
} from '../../actions/app-actions';
import { fetchAlertsData } from '../../utils/web-api-utils';
import CSVModal from './csv-modal';

const VulnerabilityScanView = props => {
  const dispatch = useDispatch();
  let sideNavMenuCollection =
    getUserRole() === 'admin'
      ? ADMIN_SIDE_NAV_MENU_COLLECTION
      : USER_SIDE_NAV_MENU_COLLECTION;
  const [activeMenu, setActiveMenu] = useState(sideNavMenuCollection[0]);
  const [degree, setdegree] = useState('90deg');
  const [redirect, setRedirect] = useState(false);
  const [link, setLink] = useState('');

  const registryScanClickHandler = () => {
    setRedirect(true);
    setLink('/registry_vulnerability_scan');
  };

  const renderScanSummary = () => {
    const { topStats = [] } = props;

    return (
      <div>
        {topStats.length > 0 && (
          <div className="stats-table">
            <div className="name">Top Exploitable Vulnerabilities</div>
            <div className="meta-description small center">
              Point in time snapshot of vulnerabilities with high score and
              exploitable remotely in running hosts and containers
            </div>
            {topStats.map(el => (
              <li key={el.cveId}>
                <span
                  className="cve-id-link"
                  title={el.cveId}
                  onClick={() => handleCVEIdClick(el.docId)}
                  aria-hidden="true"
                >
                  {el.cveId}
                </span>
                <span> {el.cveSeverity} </span>
              </li>
            ))}
          </div>
        )}
      </div>
    );
  };

  const handleDownloadButton = () => {
    const { triggerModal } = props;
    const modalProps = {
      title: 'Download Vunlnerabilities CSV',
      modalContent: () => <CSVModal />,
      contentStyles: {
        width: '350px',
        minHeight: '200px',
      },
    };
    triggerModal('GENERIC_MODAL', modalProps);
  };

  const handleCVEIdClick = alertDocId => {
    const { alertIndex = {} } = props;

    if (!alertIndex[alertDocId]) {
      const params = {
        activeIndex: 0,
        recordsPerPage: 1,
        sortOrder: 'desc',
        activeFilter: {
          doc_id: alertDocId,
        },
        lucene_query: [],
        type: 'cve',
      };
      fetchAlertsData(params).then(response => {
        const alertList = response.data.hits;
        if (alertList.length === 1) {
          dispatch(updateTableJSONModalView(alertList[0]));
        } else {
          dispatch(toaster('The requested alert either masked or not found'));
        }
      });
    } else {
      dispatch(updateTableJSONModalView(alertIndex[alertDocId]));
    }
  };

  const { location: urlLocation } = props;
  if (redirect) {
    return <Redirect to={link} />;
  }

  return (
    <div className="">
      <div className="">
        <div className="report">
          <div className="severity-report">
            <CVESeverityReportContainer />
          </div>
        </div>
        <div className="table severity-report-table">
          <CVEImageReportContainer urlLocation={urlLocation} />
        </div>
      </div>
    </div>
  );
};

const mapStateToProps = state => ({
  isSideNavCollapsed: state.get('isSideNavCollapsed'),
  isFiltersViewVisible: state.get('isFiltersViewVisible'),
  alertPanelHistoryBound: state.get('alertPanelHistoryBound') || [],
  globalSearchQuery: state.get('globalSearchQuery') || [],
  topStats: state.getIn(['cve', 'top_exploits']) || [],
  summaryStats: state.getIn(['cve', 'severity_report_view', 'summary_stats']),
});

export default connect(mapStateToProps, {
  getTopVulnerableActiveContainersAction,
})(injectModalTrigger(pollable()(VulnerabilityScanView)));
