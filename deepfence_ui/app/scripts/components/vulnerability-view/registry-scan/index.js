/* eslint-disable react/destructuring-assignment */
/* eslint-disable no-unused-vars */
import React, { useState } from 'react';
import { connect } from 'react-redux';
import classnames from 'classnames';
import SideNavigation from '../../common/side-navigation/side-navigation';
import HeaderView from '../../common/header-view/header-view';
import {
  ADMIN_SIDE_NAV_MENU_COLLECTION,
  USER_SIDE_NAV_MENU_COLLECTION,
} from '../../../constants/menu-collection';
import { getUserRole } from '../../../helpers/auth-helper';
import ContainerImageRegistryCredentials from './credential';
// import RegistryDetails from './registry-details';
import injectModalTrigger from '../../common/generic-modal/modal-trigger-hoc';

const RegistryVulnerabilityScan = props => {
  const sideNavMenuCollection =
    getUserRole() === 'admin'
      ? ADMIN_SIDE_NAV_MENU_COLLECTION
      : USER_SIDE_NAV_MENU_COLLECTION;
  const [activeMenu, setActiveMenu] = useState(sideNavMenuCollection[0]);

  const { isSideNavCollapsed, isFiltersViewVisible, match } = props;
  const divClassName = classnames(
    { 'collapse-side-nav': isSideNavCollapsed },
    { 'expand-side-nav': !isSideNavCollapsed }
  );
  const contentClassName = classnames('container-image-registry', {
    'with-filters': isFiltersViewVisible,
  });
  return (
    <div>
      <SideNavigation
        navMenuCollection={sideNavMenuCollection}
        activeMenu={activeMenu}
      />
      <div className={divClassName}>
        <HeaderView />
        <div className={contentClassName}>
          <div className="content-wrapper">
            {/* <div className="flex-wrapper"> */}
            <div className="inner-full registry-box-wrapper">
              <ContainerImageRegistryCredentials match={match} />
            </div>
            {/* </div> */}
          </div>
        </div>
      </div>
    </div>
  );
};

const mapStateToProps = state => ({
  isSideNavCollapsed: state.get('isSideNavCollapsed'),
  isFiltersViewVisible: state.get('isFiltersViewVisible'),
});

export default injectModalTrigger(
  connect(null, {
    mapStateToProps,
    // saveRegistryCredentialAction,
  })(RegistryVulnerabilityScan)
);
