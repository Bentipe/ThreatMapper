/* eslint-disable react/destructuring-assignment */
import React, { useEffect } from 'react';
import {connect, useDispatch} from 'react-redux';
import {
  saveRegistryCredentialAction,
  clearContainerImageRegistryAddFormAction,
  listRegistryCredentialsAction,
  listRegistryImagesAction,
  doNotChangeComponent,
  breadcrumbChange
} from '../../../actions/app-actions';
import CredentialsForm from './credentials-form';
import RegistryCredentialsList from './credentials-list';
import injectModalTrigger from '../../common/generic-modal/modal-trigger-hoc';

// TODO: Rename  to  generic name
const ECRCredentials = (props) => {
  const dispatch = useDispatch();
  // constructor(props) {
  //   super(props);
  //   this.saveRegistryCredentials = this.saveRegistryCredentials.bind(this);
  //   this.showFormHandler = this.showFormHandler.bind(this);
  //   this.renderModalContent = this.renderModalContent.bind(this);
  //   this.getRegistry = this.getRegistry.bind(this);
  //   this.getImages = this.getImages.bind(this);
  //   this.changeComponent = this.changeComponent.bind(this);
  // }

  useEffect(() => {
    const something = {
      ecr: 'ECR',
      azure_container_registry: 'Azure',
      google_container_registry: 'Google Container Registry',
      docker_hub: 'Docker Hub',
      docker_private_registry: 'Docker (Self Hosted)',
      quay: 'Quay',
      harbor: 'Harbor',
      gitlab: 'Gitlab',
      jfrog_container_registry: 'Jfrog'
    };
    dispatch(breadcrumbChange([{name: 'Registries', link: '/registry_vulnerability_scan'}, {name: something[props.registryType]}]));
  }, [])

  // componentDidMount() {
  //   const something = {
  //     ecr: 'ECR',
  //     azure_container_registry: 'Azure',
  //     google_container_registry: 'Google Container Registry',
  //     docker_hub: 'Docker Hub',
  //     docker_private_registry: 'Docker (Self Hosted)',
  //     quay: 'Quay',
  //     harbor: 'Harbor',
  //     gitlab: 'Gitlab',
  //     jfrog_container_registry: 'Jfrog'
  //   };
  //   this.props.dispatch(breadcrumbChange([{name: 'Registries', link: '/registry_vulnerability_scan'}, {name: something[this.props.registryType]}]));
  // }

  useEffect(() => {
    const match = '/registry_vulnerability_scan';
    if (window.location.hash === `#${match.path}`) {
      dispatch(doNotChangeComponent());
    }
  }, [props])

  // componentDidUpdate() {
  //   const match = '/registry_vulnerability_scan';
  //   if (window.location.hash === `#${match.path}`) {
  //     this.props.dispatch(doNotChangeComponent());
  //   }
  // }

  // const changeComponent = () => {
  //   dispatch(doNotChangeComponent());
  // }

  const getRegistry = () => {
    const {
      listRegistryCredentialsAction: action,
      registryType,
    } = props;
    action({
      registryType,
    });
  }

  const getImages = (registryId) => {
    const {
      listRegistryImagesAction: action,
      registryType,
    } = props;

    const params = {
      registryId,
      registryType,
    };

    return action(params);
  }

  const saveRegistryCredentials = (valuesIm) => {
    const values = valuesIm.toJS();
    const {
      saveRegistryCredentialAction: action,
      registryType,
    } = props;
    const params = {
      ...values,
      registry_type: registryType,
    };
    const promise = action(params);
    promise.then((response = {}) => {
      getRegistry();
      const {
        data,
      } = response;
      if (data) {
        // The response from get Images is required
        // to calculate total images which will be
        // shown in credentials table
        getImages(data);
      }
    });
    return promise;
  }

  const renderModalContent = (props) => {
    const {
      hideModal,
      registryType,
      formFields,
      instructions = {},
    } = props;

    const {
      initialValues = {},
    } = props;

    return (
      <CredentialsForm
        credentialsFieldList={formFields}
        onSubmit={(valuesIm) => saveRegistryCredentials(valuesIm)}
        hide={hideModal}
        registryType={registryType}
        initialValues={initialValues}
        instructions={instructions}
      />
    );
  }

  const showFormHandler = ({initialValues }) => {
    const {
      clearContainerImageRegistryAddFormAction: clearAction,
    } = props;
    const modalProps = {
      title: 'Save Registry Credentials',
      modalContent: renderModalContent(props),
      modalContentProps: {
        initialValues,
      },
      contentStyles: {
        width: '500px',
      },
      onHide: () => {
        clearAction();
      },
    };
    const {triggerModal} = props;
    triggerModal('GENERIC_MODAL', modalProps);
  }

    const {
      registryType,
      initialValues = {}
    } = props;
    return (
      <div>
        <div className="heading registry-heading">
          <div className="title-bar" style={{marginLeft: 'auto', marginRight: '1rem'}}>
            <div className="add-btn">
              <button
                type="button"
                className="btn-primary add-registry"
                onClick={() => showFormHandler({initialValues})}
            >
                + Add Registry
              </button>
            </div>
          </div>
        </div>
        <RegistryCredentialsList
          registryType={registryType}
          triggerEdit={() => showFormHandler({initialValues})}
        />
      </div>
    );
}

export default injectModalTrigger(connect(null, {
  saveRegistryCredentialAction,
  clearContainerImageRegistryAddFormAction,
  listRegistryCredentialsAction,
  listRegistryImagesAction,
})(ECRCredentials));
