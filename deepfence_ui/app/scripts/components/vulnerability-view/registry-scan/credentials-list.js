/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */
/* eslint-disable react/no-access-state-in-setstate */
/* eslint-disable react/destructuring-assignment */
import React from 'react';
import { Map } from 'immutable';
import { connect } from 'react-redux';
import { Tooltip } from 'react-tippy';
import { DfTableV2 } from '../../common/df-table-v2';
import AppLoader from '../../loader';
import { dateTimeFormat } from '../../../utils/time-utils';
import RegistryImageList from './image-list';
import {
  listRegistryCredentialsAction,
  deleteRegistryCredentialsAction,
  showModal,
  toaster,
} from '../../../actions/app-actions';
import NotificationToaster from '../../common/notification-toaster/notification-toaster';
import { getUserRole } from '../../../helpers/auth-helper';
import MORE_IMAGE from '../../../../images/more.svg';

const loaderStyle = {
  top: '6.8%',
  left: '50%',
};

class RegistryCredentialsList extends React.PureComponent {
  constructor(props) {
    super(props);
    this.handleDeleteDialog = this.handleDeleteDialog.bind(this);
    this.renderSubComponent = this.renderSubComponent.bind(this);
    this.deleteRegistry = this.deleteRegistry.bind(this);
    this.getRegistry = this.getRegistry.bind(this);
    this.onExpandedChange = this.onExpandedChange.bind(this);
    this.state = {
      expandedRowIndex: {
        0: {},
      },
    };
  }

  componentDidMount() {
    this.getRegistry();
  }

  onExpandedChange(rowInfo) {
    let expandedRowIndex = {
      ...this.state.expandedRowIndex,
    };
    const pageIndex = rowInfo.index;
    if (expandedRowIndex[pageIndex]) {
      expandedRowIndex[pageIndex] = !expandedRowIndex[pageIndex];
    } else {
      expandedRowIndex = {
        [pageIndex]: {},
      };
    }
    this.setState({
      expandedRowIndex,
    });
  }

  getRegistry() {
    const { listRegistryCredentialsAction: action, registryType } = this.props;
    action({
      registryType,
    });
  }

  deleteRegistry(registryId) {
    const { deleteRegistryCredentialsAction: action, toaster: toasterAction } =
      this.props;
    const params = {
      registryId,
    };
    const promise = action(params);
    promise.then(response => {
      if (response instanceof Error) {
        toasterAction('Registry deletion failed due to an unknown error');
      }
      this.getRegistry();
    });

    return promise;
  }

  renderSubComponent(row) {
    return (
      <div className="sub-row">
        <RegistryImageList
          registryId={row.row.original.id}
          registryType={this.props.registryType}
        />
      </div>
    );
  }

  handleDeleteDialog(registryId) {
    const params = {
      dialogTitle: 'Delete Registry Credentials?',
      dialogBody: 'Are you sure you want to delete?',
      confirmButtonText: 'Yes, Delete Credentials',
      cancelButtonText: 'No, Keep Credentials',
      onConfirmButtonClick: () => this.deleteRegistry(registryId),
      contentStyles: {
        width: '375px',
      },
    };
    this.props.showModal('DIALOG_MODAL', params);
  }

  render() {
    const userRole = getUserRole();
    const {
      dataIm = Map(),
      loadingIm = Map(),
      registryType,
      isToasterVisible,
      triggerEdit,
    } = this.props;

    const data = dataIm.get(registryType, []);
    const loading = loadingIm.get(registryType);

    return (
      <div>
        <DfTableV2
          data={data}
          onRowClick={rowInfo => this.onExpandedChange(rowInfo)}
          LoadingComponent={
            loading ? () => <AppLoader small style={loaderStyle} /> : undefined
          }
          columns={[
            {
              Header: 'Created',
              id: 'created_at',
              accessor: row => {
                if (row.created_at) {
                  return dateTimeFormat(row.created_at);
                }
                return '';
              },
              maxWidth: 200,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Name',
              accessor: 'name',
              sortable: false, // Disabling sort because it messes up with expanded row index
              Cell: row => <span title={row.value}>{row.value}</span>,
            },
            {
              Header: 'Total Images',
              accessor: 'unique_images_count',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Total Tags',
              accessor: 'total_image_tags_count',
              maxWidth: 150,
              sortable: 150,
            },
            {
              Header: 'Total Scanned',
              accessor: 'total_scanned',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'In Progress',
              accessor: 'scan_in_progress',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Credentials',
              accessor: row => {
                const { credentials } = row;
                const forDisplay = Object.keys(credentials).reduce(
                  (acc, key) => {
                    const userFriendlyKey = key.replace(/_/g, ' ');
                    acc[userFriendlyKey] = credentials[key];
                    return acc;
                  },
                  {}
                );
                return JSON.stringify(forDisplay);
              },
              id: 'credentials',
              sortable: false,
              Cell: row => <span title={row.value}>{row.value}</span>,
              minWidth: 350,
            },
            {
              Header: 'Action',
              accessor: 'id',
              Cell: row => (
                <Tooltip
                  arrow
                  animation='shift'
                  interactive
                  trigger='click'
                  hideOnClick
                  position='bottom'
                  theme='dark'
                  zIndex={1}
                  html={(
                    <div className="table-row-actions-popup">
                      <i
                        className="fa fa-lg fa-trash-o"
                        style={{ color: 'red', marginRight: '10px' }}
                        onClick={() => this.handleDeleteDialog(row.value)}
                      />
                      <i
                        className="fa fa-lg fa-pencil"
                        onClick={ev => {
                          ev.stopPropagation();
                          const { original } = row.row;
                          const initialValues = {
                            name: original.name,
                            non_secret: original.credentials,
                            id: original.id,
                          };
                          triggerEdit({ initialValues });
                        }}
                      />
                    </div>
                  )}>
                  <img
                    src={MORE_IMAGE}
                    alt="more"
                    className="table-row-actions-target"
                    onClick={e => {
                      e.stopPropagation();
                    }}
                  />
                </Tooltip>
              ),
              style: { textAlign: 'left' },
              sortable: false,
              show: userRole === 'admin',
              maxWidth: 60,
            },
          ]}
          renderRowSubComponent={({ row }) => this.renderSubComponent({ row })}
          SubComponent={component => (
            <div className="sub-row">
              <RegistryImageList
                registryId={component.row.id}
                registryType={registryType}
              />
            </div>
          )}
        />
        {isToasterVisible && <NotificationToaster />}
      </div>
    );
  }
}

const mapStateToProps = state => ({
  dataIm: state.getIn([
    'cve',
    'container_image_registry',
    'list_credentials',
    'data',
  ]),
  loadingIm: state.getIn([
    'cve',
    'container_image_registry',
    'list_credentials',
    'loading',
  ]),
  errorMessageIm: state.getIn([
    'cve',
    'container_image_registry',
    'list_credentials',
    'error',
    'message',
  ]),
  isToasterVisible: state.get('isToasterVisible'),
  ImageIndexIm: state.getIn(['cve', 'container_image_registry', 'images']),
  totalIndexIm: state.getIn(['cve', 'container_image_registry', 'total']),
  uniqueImageCountIndexIm: state.getIn([
    'cve',
    'container_image_registry',
    'uniqueImageCount',
  ]),
});

export default connect(mapStateToProps, {
  listRegistryCredentialsAction,
  deleteRegistryCredentialsAction,
  showModal,
  toaster,
})(RegistryCredentialsList);
