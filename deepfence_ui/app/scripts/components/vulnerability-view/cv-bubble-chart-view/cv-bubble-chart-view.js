/*eslint-disable*/

// React imports
import React, { useEffect, useState, useRef } from 'react';
import { connect, useDispatch } from 'react-redux';
import SunburstChart from '../../common/charts/sunburst-chart/index';
import {
  fetchCveSeverityChartData,
  setSearchQuery,
} from '../../../actions/app-actions';
import { constructGlobalSearchQuery } from '../../../utils/search-utils';
import { severityColorsSunBurst } from '../../../constants/colors';

const CvSeverityChartView = props => {
  const [intervalObj, setIntervelObj] = useState();
  const oldProps = useRef(props);
  const dispatch = useDispatch();

  useEffect(() => {
    // Initial api call to get data
    getCveSeverityChartData();

    // Calls on the basis of active time interval
    if (props.refreshInterval) {
      let interval = setInterval(() => {
        getCveSeverityChartData();
      }, props.refreshInterval.value * 1000);
      setIntervelObj(interval);
    }
  }, []);

  const [state, setState] = useState();

  useEffect(() => {
    if (
      props.refreshInterval &&
      oldProps.current.refreshInterval != props.refreshInterval
    ) {
      let interval = setInterval(() => {
        getCveSeverityChartData();
      }, props.refreshInterval.value * 1000);
      if (intervalObj) {
        clearInterval(intervalObj);
      }
      setIntervelObj(interval);
    }
    if (props.searchQuery != oldProps.current.searchQuery) {
      setState(
        { display: undefined, number: undefined, time_unit: undefined },
        function stateUpdateComplete() {
          const activeDuration = props.days.value;
          getCveSeverityChartData(
            activeDuration.number,
            activeDuration.time_unit,
            newProps.searchQuery
          );
        }.bind(this)
      );
    } else if (props.days != oldProps.current.days) {
      setState(
        { display: undefined, number: undefined, time_unit: undefined },
        function stateUpdateComplete() {
          const activeDuration = props.days.value;
          getCveSeverityChartData(
            activeDuration.number,
            activeDuration.time_unit,
            newProps.searchQuery
          );
        }.bind(this)
      );
    }
    oldProps.current = props;
  }, [props]);

  useEffect(() => {
    return () => {
      // Clearing the intervals
      if (intervalObj) {
        clearInterval(intervalObj);
      }
    };
  }, []);

  const getCveSeverityChartData = (number, time_unit, lucene_query) => {
    if (props.days || number) {
      let params = {
        number: number || number || props.days.value.number,
        time_unit: time_unit || time_unit || props.days.value.time_unit,
        lucene_query: lucene_query || props.searchQuery,
        _type: 'cve',
        cve_container_image: props.imageName,
        scan_id: props.scanId,
      };
      dispatch(fetchCveSeverityChartData(params));
    }
  };

  const onCVETypeClickHandler = point => {
    const { globalSearchQuery: existingQuery = [] } = props;
    let searchQuery = existingQuery;

    const newSearchParams = {};
    if (point.path === '') return;

    const paths = point.path.split(' / ');

    switch (paths.length) {
      case 1:
        newSearchParams.cve_severity = paths[0];
        break;
      case 2:
        newSearchParams.cve_severity = paths[0];
        newSearchParams.cve_type = paths[1];
        break;
      default:
        return;
    }
    for (const param in newSearchParams) {
      let newParam = {};
      newParam[param] = newSearchParams[param];
      searchQuery = constructGlobalSearchQuery(searchQuery, newParam);
    }
    dispatch(setSearchQuery({ searchQuery }));
  };

  const { cveSeverityChartData = [] } = props;
  let allEmpty = false;
  if (cveSeverityChartData && cveSeverityChartData.children) {
    if (cveSeverityChartData.children.length === 0) {
      allEmpty = true;
    }
  }
  const emptyData = allEmpty;
  return (
    <div className="cve-severity-chart-view-wrapper">
      {emptyData && <div className="absolute-center">No Data Available</div>}
      <div className="cve-severity-chart-wrapper">
        <SunburstChart
          data={cveSeverityChartData}
          name="CVE Languages"
          chartWidth={600}
          chartHeight={600}
          colors={severityColorsSunBurst}
          onSectionClick={point => onCVETypeClickHandler(point)}
        />
      </div>
    </div>
  );
};

const mapStateToProps = state => ({
  isSideNavCollapsed: state.get('isSideNavCollapsed'),
  searchQuery: state.get('globalSearchQuery'),
  days: state.get('alertPanelHistoryBound'),
  refreshInterval: state.get('refreshInterval'),
  cveSeverityChartData: state.get('cveSeverityChartData'),
});

export default connect(mapStateToProps)(CvSeverityChartView);
